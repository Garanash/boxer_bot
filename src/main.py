import sqlite3
import asyncio
from datetime import datetime, date, timedelta
from telebot.async_telebot import AsyncTeleBot
from telebot.asyncio_storage import StateMemoryStorage
from telebot.asyncio_filters import AdvancedCustomFilter
from telebot.callback_data import CallbackData
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telebot.asyncio_handler_backends import State, StatesGroup
import logging
import ssl
from aiohttp import ClientSession, TCPConnector, ClientTimeout
from telebot import asyncio_helper

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def fix_training_sessions():
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –¥–∞—Ç—ã
        cursor.execute('''
        UPDATE training_sessions 
        SET date = CURRENT_DATE 
        WHERE date IS NULL
        ''')

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        updated_count = cursor.rowcount

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
        cursor.execute('''
        ALTER TABLE training_sessions 
        ALTER COLUMN date SET DEFAULT CURRENT_DATE
        ''')

        conn.commit()
        return updated_count
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        conn.rollback()
        return 0

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '8141145566:AAGfUGgkp-pyWYlL_sJTx3gWXt-HydT52wY'
storage = StateMemoryStorage()
bot = AsyncTeleBot(API_TOKEN, state_storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('training_bot.db', check_same_thread=False)
cursor = conn.cursor()

# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
updated_records = fix_training_sessions()
if updated_records > 0:
    logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {updated_records} –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –¥–∞—Ç—ã")
# –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    full_name TEXT,
    is_admin INTEGER DEFAULT 0
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS trainers (
    trainer_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    phone TEXT,
    specialization TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS training_sessions (
    session_id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT NOT NULL,
    time TEXT NOT NULL,
    address TEXT NOT NULL,
    price INTEGER NOT NULL,
    max_participants INTEGER NOT NULL,
    trainer_id INTEGER,
    FOREIGN KEY (trainer_id) REFERENCES trainers(trainer_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS bookings (
    booking_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    session_id INTEGER NOT NULL,
    booking_date TEXT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (session_id) REFERENCES training_sessions(session_id)
)
''')

cursor.execute('''
UPDATE users SET is_admin = 1 WHERE user_id = ?
''', ('7513623853',))
conn.commit()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
cursor.execute('''
INSERT OR IGNORE INTO trainers (trainer_id, name, phone, specialization)
VALUES (1, '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á', '+79999999999', '–ô–æ–≥–∞')
''')

conn.commit()



def initialize_test_data():
    today = date.today()
    trainer_ids = [1, 2]

    for i in range(14):
        training_date = today + timedelta(days=i)

        # –£—Ç—Ä–µ–Ω–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
        cursor.execute('''
        INSERT OR IGNORE INTO training_sessions 
        (date, time, address, price, max_participants, trainer_id)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (training_date.strftime('%Y-%m-%d'), "09:00", "—É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è, 10",
              1000, 10, trainer_ids[i % 2]))

        # –í–µ—á–µ—Ä–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
        cursor.execute('''
        INSERT OR IGNORE INTO training_sessions 
        (date, time, address, price, max_participants, trainer_id)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (training_date.strftime('%Y-%m-%d'), "18:00", "—É–ª. –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è, 5",
              1500, 15, trainer_ids[(i + 1) % 2]))

    conn.commit()


# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
initialize_test_data()

# Callback data factory
date_factory = CallbackData('date', 'action', 'day', prefix='date')
training_factory = CallbackData('training', 'action', 'session_id', prefix='training')


# States
class TrainingStates(StatesGroup):
    select_date = State()
    select_time = State()
    select_address = State()
    confirm_booking = State()


# Admin filter
class AdminFilter(AdvancedCustomFilter):
    key = 'is_admin'

    async def check(self, message, text):
        user_id = message.from_user.id
        cursor.execute('SELECT is_admin FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        return result and result[0] == 1


bot.add_custom_filter(AdminFilter())


# Helper functions
async def get_user(user_id):
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    return cursor.fetchone()


async def create_user(user_id, username, full_name):
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)',
                   (user_id, username, full_name))
    conn.commit()


async def get_available_dates():
    today = date.today()
    dates = []
    for i in range(14):  # 2 weeks ahead
        day = today + timedelta(days=i)
        dates.append(day.strftime('%Y-%m-%d'))
    return dates


async def get_sessions_by_date(selected_date):
    cursor.execute('''
    SELECT ts.session_id, ts.time, ts.address, ts.price, ts.max_participants, 
           t.name as trainer_name,
           COUNT(b.booking_id) as booked_count
    FROM training_sessions ts
    LEFT JOIN trainers t ON ts.trainer_id = t.trainer_id
    LEFT JOIN bookings b ON ts.session_id = b.session_id
    WHERE ts.date = ?
    GROUP BY ts.session_id
    ''', (selected_date,))
    return cursor.fetchall()


async def get_user_bookings(user_id):
    cursor.execute('''
    SELECT b.booking_id, ts.date, ts.time, ts.address, ts.price, t.name as trainer_name
    FROM bookings b
    JOIN training_sessions ts ON b.session_id = ts.session_id
    LEFT JOIN trainers t ON ts.trainer_id = t.trainer_id
    WHERE b.user_id = ?
    ORDER BY ts.date, ts.time
    ''', (user_id,))
    return cursor.fetchall()


async def book_training(user_id, session_id):
    booking_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('INSERT INTO bookings (user_id, session_id, booking_date) VALUES (?, ?, ?)',
                   (user_id, session_id, booking_date))
    conn.commit()


async def cancel_booking(booking_id):
    cursor.execute('DELETE FROM bookings WHERE booking_id = ?', (booking_id,))
    conn.commit()


# Handlers
@bot.message_handler(commands=['start', 'help'])
async def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip()

    await create_user(user_id, username, full_name)

    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        KeyboardButton('üìù –ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'),
        KeyboardButton('üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏'),
        KeyboardButton('üë®‚Äçüè´ –ú–æ–π —Ç—Ä–µ–Ω–µ—Ä'),
        KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    )

    with open('trainer_sergey.jpeg','rb') as trainer_photo:
        await bot.send_photo(
            message.chat.id, photo=trainer_photo, caption=
            "üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ:",
            reply_markup=markup
        )


@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
async def show_help(message):
    await bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "üìù –ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É - –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏\n"
        "üë®‚Äçüè´ –ú–æ–π —Ç—Ä–µ–Ω–µ—Ä - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ç—Ä–µ–Ω–µ—Ä–µ\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."
    )


@bot.message_handler(func=lambda message: message.text == 'üìù –ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
async def start_booking(message):
    dates = await get_available_dates()

    markup = InlineKeyboardMarkup()
    for day in dates:
        formatted_day = datetime.strptime(day, '%Y-%m-%d').strftime('%d.%m.%Y')
        callback_data = date_factory.new(action='select', day=day)
        logger.info(f"–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–∞—Ç—ã {day} —Å callback_data: {callback_data}")
        markup.add(InlineKeyboardButton(
            text=formatted_day,
            callback_data=callback_data
        ))

    await bot.send_message(
        message.chat.id,
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=markup
    )


@bot.callback_query_handler(func=None, date_config=date_factory.filter(action='select'))
async def select_date_callback(call):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å: {call.data}")
        data = date_factory.parse(callback_data=call.data)
        logger.info(f"–†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π callback: {data}")
        selected_date = data['day']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
        try:
            datetime.strptime(selected_date, '%Y-%m-%d')
            logger.info(f"–î–∞—Ç–∞ {selected_date} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {selected_date}")
            await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        cursor.execute('''
        SELECT ts.session_id, ts.time, ts.address, ts.price, ts.max_participants, 
               t.name as trainer_name
        FROM training_sessions ts
        LEFT JOIN trainers t ON ts.trainer_id = t.trainer_id
        WHERE ts.date = ? AND ts.date IS NOT NULL
        ''', (selected_date,))
        sessions = cursor.fetchall()

        if not sessions:
            await bot.answer_callback_query(call.id, "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–∞–∂–¥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        session_ids = [str(session[0]) for session in sessions]
        placeholders = ','.join('?' for _ in session_ids)

        cursor.execute(f'''
        SELECT session_id, COUNT(*) as booked_count 
        FROM bookings 
        WHERE session_id IN ({placeholders})
        GROUP BY session_id
        ''', session_ids)
        bookings = {row[0]: row[1] for row in cursor.fetchall()}

        markup = InlineKeyboardMarkup()
        for session in sessions:
            session_id, time, address, price, max_participants, trainer_name = session
            booked_count = bookings.get(session_id, 0)
            available = max_participants - booked_count

            if available > 0:
                markup.add(InlineKeyboardButton(
                    text=f"{time} - {address} ({price}‚ÇΩ) - {available}/{max_participants} –º–µ—Å—Ç",
                    callback_data=training_factory.new(action='select', session_id=session_id)
                ))

        formatted_date = datetime.strptime(selected_date, '%Y-%m-%d').strftime('%d.%m.%Y')
        await bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ {formatted_date}:",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in select_date_callback: {str(e)}", exc_info=True)
        await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")


@bot.callback_query_handler(func=None, training_config=training_factory.filter(action='select'))
async def select_training_callback(call):
    try:
        data = training_factory.parse(callback_data=call.data)
        session_id = data['session_id']

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        cursor.execute('''
        SELECT ts.date, ts.time, ts.address, ts.price, ts.max_participants, 
               t.name as trainer_name
        FROM training_sessions ts
        LEFT JOIN trainers t ON ts.trainer_id = t.trainer_id
        WHERE ts.session_id = ?
        ''', (session_id,))
        session = cursor.fetchone()

        if not session:
            await bot.answer_callback_query(call.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        date_str, time_str, address, price, max_participants, trainer_name = session

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not date_str:
            await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
        cursor.execute('''
        SELECT COUNT(*) FROM bookings WHERE session_id = ?
        ''', (session_id,))
        booked_count = cursor.fetchone()[0]
        available = max_participants - booked_count

        if available <= 0:
            await bot.answer_callback_query(call.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã", show_alert=True)
            return

        formatted_date = datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å",
            callback_data=training_factory.new(action='confirm', session_id=session_id)
        ))
        markup.add(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=training_factory.new(action='cancel', session_id=session_id)
        ))

        await bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üèãÔ∏è‚Äç‚ôÇÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n\n"
                 f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                 f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
                 f"üìç –ê–¥—Ä–µ—Å: {address}\n"
                 f"üíµ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
                 f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer_name}\n"
                 f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: {available}\n\n"
                 f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in select_training_callback: {str(e)}", exc_info=True)
        await bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

@bot.callback_query_handler(func=None, training_config=training_factory.filter(action='confirm'))
async def confirm_booking_callback(call):
    try:
        data = training_factory.parse(callback_data=call.data)
        session_id = data['session_id']
        user_id = call.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç
        cursor.execute('''
        SELECT ts.date, ts.time, ts.max_participants, 
               (SELECT COUNT(*) FROM bookings WHERE session_id = ?) as booked_count
        FROM training_sessions ts
        WHERE ts.session_id = ? AND ts.date IS NOT NULL
        ''', (session_id, session_id))
        result = cursor.fetchone()

        if not result:
            await bot.answer_callback_query(call.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        date_str, time_str, max_participants, booked_count = result

        if booked_count >= max_participants:
            await bot.answer_callback_query(call.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('''
        SELECT 1 FROM bookings WHERE user_id = ? AND session_id = ?
        ''', (user_id, session_id))
        if cursor.fetchone():
            await bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        booking_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('''
        INSERT INTO bookings (user_id, session_id, booking_date)
        VALUES (?, ?, ?)
        ''', (user_id, session_id, booking_date))
        conn.commit()

        await bot.answer_callback_query(call.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        logger.error(f"Error in confirm_booking_callback: {e}")
        await bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")

@bot.message_handler(func=lambda message: message.text == 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏')
async def show_my_bookings(message):
    user_id = message.from_user.id
    bookings = await get_user_bookings(user_id)

    if not bookings:
        await bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        return

    for booking in bookings:
        booking_id, date_str, time_str, address, price, trainer_name = booking
        formatted_date = datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
            callback_data=training_factory.new(action='cancel_booking', session_id=booking_id)
        ))

        await bot.send_message(
            message.chat.id,
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è –í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
            f"üìç –ê–¥—Ä–µ—Å: {address}\n"
            f"üíµ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
            f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer_name}",
            reply_markup=markup
        )


@bot.callback_query_handler(func=None, training_config=training_factory.filter(action='cancel_booking'))
async def cancel_booking_callback(call):
    booking_id = training_factory.parse(callback_data=call.data)['session_id']

    await cancel_booking(booking_id)
    await bot.answer_callback_query(call.id, "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
    await bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.message_handler(func=lambda message: message.text == 'üë®‚Äçüè´ –ú–æ–π —Ç—Ä–µ–Ω–µ—Ä')
async def show_my_trainer(message):
    user_id = message.from_user.id

    cursor.execute('''
    SELECT t.name, t.phone, t.specialization
    FROM trainers t
    JOIN bookings b ON t.trainer_id = (
        SELECT ts.trainer_id 
        FROM training_sessions ts 
        JOIN bookings b ON ts.session_id = b.session_id 
        WHERE b.user_id = ? 
        ORDER BY ts.date DESC 
        LIMIT 1
    )
    WHERE b.user_id = ?
    GROUP BY t.trainer_id
    ''', (user_id, user_id))

    trainer = cursor.fetchone()

    if trainer:
        name, phone, specialization = trainer
        await bot.send_message(
            message.chat.id,
            f"üë®‚Äçüè´ –í–∞—à —Ç—Ä–µ–Ω–µ—Ä:\n\n"
            f"–ò–º—è: {name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}"
        )
    else:
        await bot.send_message(
            message.chat.id,
            "ü§∑‚Äç‚ôÇÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞."
        )


# Admin commands
@bot.message_handler(commands=['admin'], is_admin=True)
async def admin_panel(message):
    today = date.today().strftime('%Y-%m-%d')
    sessions = await get_sessions_by_date(today)

    if not sessions:
        await bot.send_message(message.chat.id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        return

    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for session in sessions:
        session_id, time, address, price, max_participants, trainer_name, booked_count = session
        response += (
            f"‚è∞ {time} - {address}\n"
            f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer_name}\n"
            f"üìä –ó–∞–ø–∏—Å–∞–Ω–æ: {booked_count}/{max_participants}\n"
            f"üíµ –¶–µ–Ω–∞: {price}‚ÇΩ\n\n"
        )

    await bot.send_message(message.chat.id, response)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("Starting bot...")
    try:
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        await bot.remove_webhook()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.infinity_polling()
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
    finally:
        logger.info("Bot stopped")


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")